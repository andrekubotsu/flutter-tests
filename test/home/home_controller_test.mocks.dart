// Mocks generated by Mockito 5.0.14 from annotations
// in fpflutter/test/home/home_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i5;
import 'package:flutter/material.dart' as _i3;
import 'package:fpflutter/home/home_controller.dart' as _i6;
import 'package:fpflutter/home/home_repository.dart' as _i2;
import 'package:fpflutter/home/home_state.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeHomeRepository_0 extends _i1.Fake implements _i2.HomeRepository {}

class _FakeValueNotifier_1<T> extends _i1.Fake implements _i3.ValueNotifier<T> {
}

class _FakeHomeState_2 extends _i1.Fake implements _i4.HomeState {}

class _FakeEither_3<L, R> extends _i1.Fake implements _i5.Either<L, R> {}

/// A class which mocks [HomeController].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeController extends _i1.Mock implements _i6.HomeController {
  MockHomeController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHomeRepository_0()) as _i2.HomeRepository);
  @override
  _i3.ValueNotifier<_i4.HomeState> get stateNotifier =>
      (super.noSuchMethod(Invocation.getter(#stateNotifier),
              returnValue: _FakeValueNotifier_1<_i4.HomeState>())
          as _i3.ValueNotifier<_i4.HomeState>);
  @override
  _i4.HomeState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeHomeState_2()) as _i4.HomeState);
  @override
  set state(_i4.HomeState? state) =>
      super.noSuchMethod(Invocation.setter(#state, state),
          returnValueForMissingStub: null);
  @override
  _i7.Future<void> getNames() =>
      (super.noSuchMethod(Invocation.method(#getNames, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i2.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.Either<String, List<String>>> getNames() =>
      (super.noSuchMethod(Invocation.method(#getNames, []),
              returnValue: Future<_i5.Either<String, List<String>>>.value(
                  _FakeEither_3<String, List<String>>()))
          as _i7.Future<_i5.Either<String, List<String>>>);
  @override
  String toString() => super.toString();
}
